// file:        arrayclass.cpp
// author:      Geoffrey Tien
// date:        2016-05-19
// description: Implementation file for an array wrapper class, CPSC 221 lab 4
//              To be completed by you!
//              *** This file will contain a deliberate error! ***

#ifdef _ARRAYCLASS_H_

#include <iostream>



// paste code from lab 4 document below

// Default constructor
// POST: Creates an ArrayClass object with an array of size 10
// PARAM:

template <typename T>
ArrayClass<T>::ArrayClass()
{
    arr_size = 10;
    arr = new T[arr_size];
    current_size = 0;
}

// Parameterized constructor
// PRE: array_size > 0
// POST: Creates an ArrayClass object with an array of size array_size
// PARAM: array_size = size of the array to be created
template <typename T>
ArrayClass<T>::ArrayClass(int array_size)
{
    arr_size = array_size;
    arr = new T[arr_size];
    current_size = 0;
}

// Destructor
// POST: De-allocates dynamic memory associated with object
template <typename T>
ArrayClass<T>::~ArrayClass()
{
    delete[] arr;
}

// Sets the value of the next free element
// PRE: current_size < arr_size
// POST: sets index current_size to value
// PARAM: value = value to be set
template <typename T>
void ArrayClass<T>::Insert(T value)
{
    if (current_size < arr_size)
    {
        arr[current_size++] = value;
    }
    else{
        throw 1;
    }
// NOTE – no else – should throw error
}

// Sets an existing element’s value
// PRE: 0 <= i < current_size
// POST: sets index i to value
// PARAM: i = index of element to be changed
// value = value to be set
template <typename T>
void ArrayClass<T>::Set(int i, T value)
{
        if (i >= 0 && i < current_size)
        {
            arr[i] = value;
        }
// NOTE – no else – should throw error
        else {
            throw 1;
        }
}

// Returns an element’s value
// PRE: 0 <= i < current_size
// POST: returns the value at index i
// PARAM: i = index of value to be returned
template <typename T>
T ArrayClass<T>::Get(int i) const
{
        if (i >= 0 && i < current_size)
        {
            return arr[i];
        }
// Returns 0 if i invalid – THIS IS NOT SATISFACTORY!
        else
        {
            throw 1;
        }
}

// POST: Returns the size of the underlying array
template <typename T>
int ArrayClass<T>::MaxSize() const
{
    return arr_size;
}

// POST: Returns the number of elements stored in the array
template <typename T>
int ArrayClass<T>::Size() const
{
    return current_size;
}

#endif
